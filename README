	MoRiBS-PIGS: It is derived from the MoRiBS-PIMC (see Computer Physics Communications vol. 204, pp. 170–188, yr 2016) to estimate ground state properties of many-body quantum systems based on Path Integral Ground State (PIGS) approach. 
	-----------------------------------------------------------------------------------
	-----------------------------------------------------------------------------------

	* Disclaimer: We disclaim any and all warranties concerning the enclosed program. *

The source codes of MoRiBS-PIGS are mainly written by Tapas Sahoo and Pierre-Nicholas Roy, University of Waterloo, Canada. If you encounter any problem with respect to compiling or running the program, please contact Tapas Sahoo by email (tsahoo@uwaterloo.ca or tapascuchem@gmail.com).

					************************
					**    COMPILATION     **
					************************

Users should not change the directory structure after they unzip the distributed file. We label the main directory, where the source codes (*.cc, *.h, and *.f) are, as $MAIN. Please note that we have provided example configuration files like makefile with the distribution and one may just adjust the files according to the architecture of his/her computer. There is no need to create new configuration files. The compilation procedure of MoRiBS-PIGS contains the following steps:

	1: `cd $MAIN/spring` and open make.CHOICES. One should specify the platform of his/her computer by uncommenting the correct line, i.e., PLAT = LINUX;
	2: `cd $MAIN/spring/SRC` and open make.${PLAT}. With the above choice, it should be make.LINUX. In make.${PLAT}, one should specify the fortran and C/C++ compilers that are installed in his/her computer. Note that only the non-MPI compilation of SPRNG has been tested with MoRiBS-PIGS;
	3: at $MAIN/spring/SRC, `make clean` and `make`. The generated libraries are in $MAIN/spring/lib. Make sure $MAIN/spring/lib is empty before `make`. Sometimes, `make clean` may not clean up $MAIN/spring/lib completely. Steps 1-3 are to compile the sprng libraries that are needed by the main code;
	4: at $MAIN, open makefile, and specify options, CFLAGS, LDFLAGS, CC and FC. Those are the optimization options, C/C++ compilation flags, link flags, C/C++ compiler, and Fortran compiler respectively;
	5: at $MAIN, `make clean` and `make`. If there is no error message, the generated executable is called pimc.


					************************
					**   BEFORE RUNNING   **
					************************

Please note that one should delete the following files before each simulation run:
	1: yw001.*;
	2: permutation,
Otherwise, the simulation will bomb out.

Remember to use asymrho.x (in nmv_prop/), symrho.x (in symtop_prop/) or linden.x (in linear_prop/) to generate the needed files for PIMC sampling of asymmetric top, symmetric top, or linear rotors. Users should read the respective README files in those directories carefully before compiling and running those programs. Users should carefully name the resultant files in accordance to the rules explained in Computer Physics Communications vol. 204, pp. 170–188, yr 2016.

N.B.: For the MoRiBS-PIGS simulations of the nonlinear rotors, the user should always use an odd number of beads, and the name of all *.rho, *.eng, *.esq files must be of the format - {rotor name}_T{temperature}t{# of rotational beads}.rho/eng/esq. Remember, the {temperature} string's total width must be of six digits after the decimal point.

As for Example:

	H2O_T10.000000t101.rho	
	H2O_T10.000000t101.eng
	H2O_T10.000000t101.esq

To generate the above files by asymrho.f, P-1 beads are used in MoRiBS-PIGS simulations instead of P beads used in the MoRiBS-PIMC simulations. Imaginary time (tau) is defined as (beta/P-1), where P is the number of beads.

The name of the working directory to submit jobs is ~/MoRiBS-PIGS/examples/pigs-simulations-for-para-Water. To execute the simulations, the user must have the following files -
	1: qmc.input
	2: *.rho, *.eng, *.esq files

The user is advised to read Computer Physics Communications vol. 204, pp. 170–188, yr 2016, to set up the input (qmc.input).

One may compile the code, move the resultant executable "pimc" to examples/MF_8He_0.37K_512_128 or examples/N2O_5pH2_512_128, and try running the respective simulations. One may also look at the files in those two example directories to have a sense of how many files are needed and their formats. Some of these examples are discussed in our associated paper.

					************************
					**   OUTPUT SUMMARY   **
					************************

There are two relevant directories for a MoRiBS-PIGS run, the working directory and the output directory. The former is the directory where the program executable is and the latter is specified in qmc.input. In below we simply call the two directories $WORK and $OUTPUT. And we also use $FILNAM to specify the FILENAMEPREFIX that is specified in qmc.input.

************
   energy
************
All energy outputs are stored in the following two files:

	$OUTPUT/$FILNAM_sum.eng and $OUTPUT/$FILNAM.eng.

The first contains the energy components averaged on the fly while the latter contains the block-averaged quantities for every block. In $OUTPUT/$FILNAM_sum.eng, column
	1: counting indices of punching out the energy components;
	2: potential energy;
	3: total energy (rotational + potential);

In $OUTPUT/$FILNAM.eng, column
	1: block index;
	2: block averaged potential energy;
	3: block averaged total energy (rotational + potential);

All energy quantities have the unit of K.

*******************
   distribution
*******************

Whenever there are point-like particles, the $OUTPUT/$FILNAM_sum.gra contains pair radial distribution between point-like particles. The first column has radius and the second the rho(r). It follows the convention that integrating r from 0 to infinity rho(r)*dr gives 1. In practice, the density is made by binning in a finite grid, which is also normalized to 1.

If there is a linear rotor, the $OUTPUT/$FILNAM_sum.g2d file contains the 2-D distribution of the point-like particles around the rotor. The 2 dimensions are radius and polar-angle. The file has three columns, where column

	1: polar angles in degree;
	2: radius in Angstrom;
	3: density rho(r, theta).

The density follows the following normalization:

	Integrating from 0 to pi for theta and from 0 to infinity for r rho(r,theta)dr dtheta = 1.

For a non-linear rotor, there are three files:

	$OUTPUT/$FILNAM_sum.gri;
	$OUTPUT/$FILNAM_sum.grt;
	$OUTPUT/$FILNAM_sum.grc

which contain the radial (r), polar angle (theta), and azimuthal angle (chi) distributions of the point-like particles in the molecu-fixed frame (MFF) of the rotor. The MFF is the same as the one used in the definition of Eular angles. The densities follow the following normalizations:

	Integrating r from 0 to infinity rho(r) dr = number of point like particles;
	Integrating theta from 0 to pi rho(theta) dtheta = 1;
	Integrating chi from 0 to 2*pi rho(chi) dchi =1.

In addition, at the beginning of each block, the program punches out a $OUTPUT/$FILNAM###.xyz file to record the path configuration of the system. The file has N*P+2 lines, where N is the number of all particles (point-like + rotor) and P is the number of translational beads. Line one contains the permutational table for the configuration snapshot and line two is a comment line. The rest lines loop over all particles, point-like first and rotor second, and for each particle loop over all beads and punch out the corresponding configurations. Column 1 has the particle name, columns 2, 4, and 6 the x, y, and z coordinates in the space-fixed frame respectively, and columns 3, 5, 7 the phi, cos(theta), and chi angle coordinates. For linear rotors, phi and theta are the azimuthal and polar angles. For a top, phi, theta, and chi are the Eular angles defined in Figure 3.1, page 78 of Zare (Angular Momentum, 1988, John Wiley & Sons, Inc). When the number of rotational beads (Q) is a fraction of P, only the first Q lines of each particle block contains the meaningful angular coordinates.
